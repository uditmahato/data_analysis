
Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
Dictionary is a collection which is ordered** and changeable. No duplicate members.


List
-------------
 
List items are ordered, changeable, and allow duplicate values.
 
 
Method	        Description
append()	Adds an element at the end of the list
clear()	        Removes all the elements from the list
copy()	        Returns a copy of the list
count()	        Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()	        Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()	        Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()	        Sorts the list


Tuple
--------------------
Tuple items are ordered, unchangeable, and allow duplicate values.

count()	Returns the number of times a specified value occurs in a tuple
index()	Searches the tuple for a specified value and returns the position of where it was found

sets
-------------------------
add()	                            Adds an element to the set
clear()	                            Removes all the elements from the set
copy()	                            Returns a copy of the set
difference()	                    Returns a set containing the difference between two or more sets
difference_update()	            Removes the items in this set that are also included in another, specified set
discard()	                    Remove the specified item
intersection()	                    Returns a set, that is the intersection of two other sets
intersection_update()	            Removes the items in this set that are not present in other, specified set(s)
isdisjoint()	                    Returns whether two sets have a intersection or not
issubset()	                    Returns whether another set contains this set or not
issuperset()                        Returns whether this set contains another set or not
pop()	                            Removes an element from the set
remove()	                    Removes the specified element
symmetric_difference()	            Returns a set with the symmetric differences of two sets
symmetric_difference_update()	    inserts the symmetric differences from this set and another
union()	                            Return a set containing the union of sets
update()	                    Update the set with the union of this set and others

Dictonary
------------

A dictionary is a collection which is ordered*, changeable and do not allow duplicates.

clear() 	Removes all the elements from the dictionary
copy()	        Returns a copy of the dictionary
fromkeys()	Returns a dictionary with the specified keys and value
get()	        Returns the value of the specified key
items()	        Returns a list containing a tuple for each key value pair
keys()	        Returns a list containing the dictionary's keys
pop()	        Removes the element with the specified key
popitem()	Removes the last inserted key-value pair
setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()	Updates the dictionary with the specified key-value pairs
values()	Returns a list of all the values in the dictionary

note:List carry heteroginious elements whereas array carry homoginious element

Stacks
------
-linear data structure
-First in first out
-operation can be performed on both front and back

Trees
--------
-Trees are non-linear Data Structures which have root and nodes. 
-The root is the node from where the data originates and the nodes are the other data points that are available to us. 
-The node that precedes is the parent and the node after is called the child. There are levels a tree has to show the depth of information. 
-The last nodes are called the leaves. 
-Trees create a hierarchy which can be used in a lot of real-world applications such as the HTML pages use trees to distinguish which tag comes under which block. 
-It is also efficient in searching purposes and much more.

Linked list
------------
Linked lists are linear Data Structures which are not stored consequently but are linked with each other using pointers. 
The node of a linked list is composed of data and a pointer called next. 
These structures are most widely used in image viewing applications, music player applications and so forth.

Graphs
--------
Graphs are used to store data collection of points called vertices (nodes) and edges (edges). Graphs can be called as the most accurate representation of a real-world map. They are used to find the various cost-to-distance between the various data points called as the nodes and hence find the least path. Many applications such as Google Maps, Uber, and many more use Graphs to find the least distance and increase profits in the best ways.

Hashmaps
--------
HashMaps are the same as what dictionaries are in Python. They can be used to implement applications such as phonebooks, populate data according to the lists and much more.

That wraps up all the prominent Data Structures in Python. I hope you have understood built-in as well as the user-defined Data Structures that we have in Python and why they are important.





